<% if (loggedIn) { %>
    <%- include ('./templates/header.ejs', {"name": name}) %>
<% } else { %>
    <%- include ('./templates/headerloggedout.ejs') %>
<% } %>

<!-- <div class="container">
    <div class="row">
        <div class="col-md text-center">
            <img src="banana-dance.gif" alt="Banana Dance" width="100">
        </div>
        <div class="text-center col-md">
            <iframe id="video" width="fill" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>
        </div>
        <div class="col-md text-center">
            <img src="banana-dance.gif" alt="Banana Dance" width="100">
        </div>
    </div>
</div> -->

<div class="container">
    <div class="row mt-3">
        <% let i=0; %>
        <% for(i=0; i < 4; i++) { %>
            <% if (i % 2 == 0) { %>
                <div class="col-3">
                    <img src="banana-dance.gif" class="img-fluid border-image" alt="Image 1">
                </div>
            <% } else { %>
                <div class="col-3">
                    <img src="snorlax-dumper.gif" class="img-fluid border-image" alt="Image 2">
                </div>
            <% } %>
        <% } %>
    </div>
    <div class="row text-center">
        <canvas id="pong" width="800" height="400"></canvas>
        <div class="roww">
            <button id="start-btn">Start Game</button>
            <button id="reset-btn">Reset Game</button>
        </div>
    </div>
    <div class="row mt-3">
        <% let k=0; %>
        <% for(k=0; k < 4; k++) { %>
            <% if (k % 2 == 0) { %>
                <div class="col-3">
                    <img src="banana-dance.gif" class="img-fluid border-image" alt="Image 1">
                </div>
            <% } else { %>
                <div class="col-3">
                    <img src="snorlax-dumper.gif" class="img-fluid border-image" alt="Image 2">
                </div>
            <% } %>
        <% } %>
    </div>
</div>

<script>
    // Get the canvas element
    const canvas = document.getElementById("pong");
    const context = canvas.getContext("2d");

    // Create the pong paddle
    const paddleWidth = 10,
        paddleHeight = 100;
    const player = {
        x: 0,
        y: canvas.height / 2 - paddleHeight / 2,
        width: paddleWidth,
        height: paddleHeight,
        color: "#2ecc71",
        dy: 10,
    };
    const ai = {
        x: canvas.width - paddleWidth,
        y: canvas.height / 2 - paddleHeight / 2,
        width: paddleWidth,
        height: paddleHeight,
        color: "#e74c3c",
        dy: 4,
    };

    // Create the pong ball
    const ball = {
        x: canvas.width / 2,
        y: canvas.height / 2,
        radius: 10,
        speed: 2,
        dx: 2,
        dy: Math.random() < 0.5 ? -2 : 2, // Randomize the initial y-direction of the ball
        color: "#f39c12",
    };

    // Game state
    let gameStarted = false;

    // Move paddles
    function movePaddle(event) {
        if (gameStarted) {
            switch (event.keyCode) {
            case 38: // up arrow key
                player.y -= player.dy;
                break;
            case 40: // down arrow key
                player.y += player.dy;
                break;
            }
        }
    }

    // Move the AI paddle randomly
    let nextRandomMoveTime = 0;
    let aiMoveDirection = 0;

    function moveAI() {
    const currentTime = Date.now();
    
    // Check if it's time to make a random move
    if (currentTime >= nextRandomMoveTime) {
        aiMoveDirection = Math.random() < 0.5 ? -1 : 1;
        
        // Calculate a new random delay for the next move
        const randomDelay = Math.random() * (250 - 100) + 100; // Random time between 0.5 and 2 seconds
        nextRandomMoveTime = currentTime + randomDelay;
    }
    
    // Move the AI paddle continuously
    ai.y += ai.dy * aiMoveDirection;

    // Ensure the AI paddle stays within the canvas boundaries
    if (ai.y <= 0) {
        ai.y = 0;
    } else if (ai.y + ai.height >= canvas.height) {
        ai.y = canvas.height - ai.height;
    }
    }

    // Reset the game
    function resetGame() {
        gameStarted = false;
        player.y = canvas.height / 2 - paddleHeight / 2;
        ai.y = canvas.height / 2 - paddleHeight / 2;
        ball.x = canvas.width / 2;
        ball.y = canvas.height / 2;
        ball.dx = Math.random() < 0.5 ? -2 : 2; // Randomize the initial x-direction of the ball
        ball.dy = Math.random() < 0.5 ? -2 : 2; // Randomize the initial y-direction of the ball
    }

    // Update function
    function update() {
      // Clear the canvas
        context.clearRect(0, 0, canvas.width, canvas.height);
        moveAI();
      // Move the paddles
        document.addEventListener("keydown", movePaddle);
        

        if (gameStarted) {
        // Move the ball
            ball.x += ball.dx * ball.speed;
            ball.y += ball.dy * ball.speed;

        // Collision detection with paddles
        if (
            ball.y + ball.radius > player.y &&
            ball.y - ball.radius < player.y + player.height &&
            ball.dx < 0
        ) {
            if (ball.x - ball.radius < player.x + player.width) {
                ball.dx = -ball.dx;
                ball.dy = Math.random() * (10 - 5) + 1; // Randomize the angle between 10 and 70 degrees
            }
        }

        if (
            ball.y + ball.radius > ai.y &&
            ball.y - ball.radius < ai.y + ai.height &&
            ball.dx > 0
        ) {
            if (ball.x + ball.radius > ai.x) {
                ball.dx = -ball.dx;
                ball.dy = Math.random() * (10 - 5) + 1; // Randomize the angle between 10 and 70 degrees
            }
        }

        // Collision detection with walls
        if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
            ball.dy = -ball.dy;
        }

        // Draw the paddles
        context.fillStyle = player.color;
        context.fillRect(player.x, player.y, player.width, player.height);

        context.fillStyle = ai.color;
        context.fillRect(ai.x, ai.y, ai.width, ai.height);

        // Draw the ball
        context.fillStyle = ball.color;
        context.beginPath();
        context.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
        context.closePath();
        context.fill();

        // Check for win condition
        if (ball.x - ball.radius > canvas.width) {
            alert("You win!");
            resetGame();
        } else if (ball.x + ball.radius < 0) {
            alert("You lose!");
            resetGame();
        }

        // Request animation frame
        requestAnimationFrame(update);
        }
    }

    // Start the game
    document.getElementById("start-btn").addEventListener("click", function() {
        gameStarted = true;
        update();
    });

    // Reset the game
    document.getElementById("reset-btn").addEventListener("click", function() {
        resetGame();
    });
</script>



<style>
    .video-container {
      position: relative;
      padding-bottom: 56.25%;
      padding-top: 30px;
      height: 0;
      overflow: hidden;
    }
    
    .video-container iframe,
    .video-container object,
    .video-container embed {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    
    .border-image {
      padding: 10px;
    }
    
    /* // css for images */
    .img-fluid {
      width: 233px;
      height: 233px;
    }

    @media (max-width: 992px) {
      .img-fluid {
        width: 125px;
        height: 125px;
      }
    }

    @media (max-width: 768px) {
      .img-fluid {
        width: 75px;
        height: 75px;
      }
    }
</style>


<%- include('templates/svgs.ejs') %>
<%- include('templates/footer.ejs') %>